
Timer0_Compare_Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001b6  2**0
                  ALLOC
  2 .stab         000003c0  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006b5  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <timer0_ctc_init>:
 */
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void timer0_ctc_init(void){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS00) | (1<<CS02);
  84:	e3 e5       	ldi	r30, 0x53	; 83
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8d e8       	ldi	r24, 0x8D	; 141
  8a:	80 83       	st	Z, r24
	OCR0 = 250;
  8c:	ec e5       	ldi	r30, 0x5C	; 92
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8a ef       	ldi	r24, 0xFA	; 250
  92:	80 83       	st	Z, r24
	SREG |= (1<<7);
  94:	af e5       	ldi	r26, 0x5F	; 95
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	ef e5       	ldi	r30, 0x5F	; 95
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	8c 93       	st	X, r24
	TIMSK |= (1<<OCIE0);
  a2:	a9 e5       	ldi	r26, 0x59	; 89
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e9 e5       	ldi	r30, 0x59	; 89
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	8c 93       	st	X, r24
}
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

000000b6 <main>:

unsigned char tick = 0;
int main(void){
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<0);
  be:	a1 e3       	ldi	r26, 0x31	; 49
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	e1 e3       	ldi	r30, 0x31	; 49
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8c 93       	st	X, r24
	PORTD &= ~(1<<0);
  cc:	a2 e3       	ldi	r26, 0x32	; 50
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	e2 e3       	ldi	r30, 0x32	; 50
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	8e 7f       	andi	r24, 0xFE	; 254
  d8:	8c 93       	st	X, r24
	timer0_ctc_init();
  da:	0e 94 3e 00 	call	0x7c	; 0x7c <timer0_ctc_init>
  de:	ff cf       	rjmp	.-2      	; 0xde <main+0x28>

000000e0 <__vector_19>:

	}
}


ISR(TIMER0_COMP_vect){
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
  f6:	df 93       	push	r29
  f8:	cf 93       	push	r28
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	tick++;
  fe:	80 91 60 00 	lds	r24, 0x0060
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 60 00 	sts	0x0060, r24
	if(tick == 2){
 108:	80 91 60 00 	lds	r24, 0x0060
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	51 f4       	brne	.+20     	; 0x124 <__vector_19+0x44>
		tick = 0;
 110:	10 92 60 00 	sts	0x0060, r1
		PORTD ^= (1<<0);
 114:	a2 e3       	ldi	r26, 0x32	; 50
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	e2 e3       	ldi	r30, 0x32	; 50
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	90 81       	ld	r25, Z
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	89 27       	eor	r24, r25
 122:	8c 93       	st	X, r24
	}
}
 124:	cf 91       	pop	r28
 126:	df 91       	pop	r29
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	bf 91       	pop	r27
 12e:	af 91       	pop	r26
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
